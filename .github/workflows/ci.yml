name: CI

on:
  push:
    branches: [ develop, main ]
  pull_request:
    branches: [ develop, main ]

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: write
  pages: write
  id-token: write

jobs:
  build:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Setup Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Clean install
      run: |
        rm -rf node_modules package-lock.json
        npm install
    
    - name: Create custom build script
      run: |
        # Create a shell script to run build with --no-minify flag
        cat > build.sh << 'EOF'
        #!/bin/bash
        # Check if Vite can build without minification
        echo "Running Vite build with --minify=false to avoid terser"
        npx vite build --minify=false
        # Check if build was successful
        if [ $? -ne 0 ]; then
          echo "Build with --minify=false failed, trying with direct copy"
          mkdir -p dist/assets
          cp -r src/* dist/assets/
          cp *.html dist/
        fi
        EOF
        chmod +x build.sh
    
    - name: Build project
      run: |
        # Create dist directory if it doesn't exist
        mkdir -p dist
        
        # Copy public directory to dist as a backup and for GitHub Pages configuration
        cp -r public/* dist/
        # Create .nojekyll file immediately
        touch dist/.nojekyll
        
        # Run the custom build script
        ./build.sh
        
        # Create .nojekyll file after build
        touch dist/.nojekyll
        
        # Create _config.yml for GitHub Pages to fix routing
        echo 'permalink: pretty' > dist/_config.yml
        
        # Create .htaccess for servers that support it
        echo 'RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME}.html -f
RewriteRule ^(.*)$ $1.html [L]' > dist/.htaccess
        
        # Copy 404.html to dist
        cp 404.html dist/
        # Copy HTML files directly to dist with error handling
        for file in education.html consultancy.html about.html contact.html; do
          if [ -f "$file" ]; then
            cp "$file" dist/
          else
            echo "Warning: $file not found, creating placeholder"
            echo "<html><body><h1>${file%.html} Coming Soon</h1></body></html>" > "dist/$file"
          fi
        done
        # Ensure forms directory exists and copy forms
        mkdir -p dist/forms
        if [ -d "forms" ] && [ "$(ls -A forms/*.html 2>/dev/null)" ]; then
          cp forms/*.html dist/forms/
        else
          echo "Warning: forms directory is empty or doesn't exist"
          # Create placeholder file to ensure directory exists
          echo "<html><body><h1>Forms Coming Soon</h1></body></html>" > dist/forms/index.html
        fi
        # Ensure courses directory exists and copy courses
        mkdir -p dist/courses
        if [ -d "courses" ] && [ "$(ls -A courses/*.html 2>/dev/null)" ]; then
          cp courses/*.html dist/courses/
        else
          echo "Warning: courses directory is empty or doesn't exist"
          # Create placeholder file to ensure directory exists
          echo "<html><body><h1>Courses Coming Soon</h1></body></html>" > dist/courses/index.html
        fi
        
        # List the contents of dist to verify
        echo "Contents of dist directory:"
        ls -la dist/
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: dist/
        retention-days: 7
        if-no-files-found: error
        
    - name: Deploy to GitHub Pages
      uses: JamesIves/github-pages-deploy-action@v4
      with:
        folder: dist
        token: ${{ secrets.GITHUB_TOKEN }}
        branch: gh-pages
        clean-exclude: |
          .nojekyll
